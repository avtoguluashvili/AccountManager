@page "/accounts"
@using AccountManager.Dto
@inject HttpClient Http
@inject NavigationManager Navigation
@inject IJSRuntime JS

<h3>Accounts</h3>

<div class="mb-3">
    <input type="text" @bind="searchQuery" placeholder="Search by name..." class="form-control" />
    <button class="btn btn-primary mt-2" @onclick="SearchAccounts">Search</button>
</div>

<button class="btn btn-success mb-3" @onclick="AddNewAccount">+ Add New Account</button>

@if (accounts == null)
{
    <p>Loading...</p>
}
else if (!accounts.Any())
{
    <p>No accounts found.</p>
}
else
{
    <table class="table table-bordered table-striped">
        <thead>
            <tr>
                <th>Company Name</th>
                <th>Is Active</th>
                <th>Token</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var account in accounts)
            {
                <tr>
                    <td>@account.CompanyName</td>
                    <td>@(account.IsActive == 1 ? "Active" : "Inactive")</td>
                    <td>@account.Token</td>
                    <td>
                        <button class="btn btn-primary me-2" @onclick="() => EditAccount(account.AccountId)">Edit</button>
                        <button class="btn btn-danger me-2" @onclick="() => DeleteAccount(account.AccountId)">Delete</button>
                        <button class="btn btn-warning" @onclick="() => ToggleActive(account.AccountId)">
                            @(account.IsActive == 1 ? "Disable" : "Enable")
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<AccountDto> accounts = new();
    private string searchQuery = "";

    protected override async Task OnInitializedAsync()
    {
        await LoadAccounts();
    }

    private async Task LoadAccounts()
    {
        try
        {
            accounts = await Http.GetFromJsonAsync<List<AccountDto>>("api/account");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading accounts: {ex.Message}");
        }
    }

    private async Task SearchAccounts()
    {
        if (string.IsNullOrWhiteSpace(searchQuery))
        {
            await LoadAccounts();
            return;
        }

        try
        {
            accounts = await Http.GetFromJsonAsync<List<AccountDto>>($"api/account/search?query={searchQuery}");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error searching accounts: {ex.Message}");
        }
    }

    private void AddNewAccount()
    {
        Navigation.NavigateTo("/account/edit");
    }

    private async Task DeleteAccount(int accountId)
    {
        bool confirmDelete = await JS.InvokeAsync<bool>("confirm", "Are you sure you want to delete this account?");
        if (!confirmDelete) return;

        try
        {
            await Http.DeleteAsync($"api/account/{accountId}");
            await LoadAccounts();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error deleting account: {ex.Message}");
        }
    }

    private async Task ToggleActive(int accountId)
    {
        try
        {
            await Http.PatchAsync($"api/account/{accountId}/toggle", null);
            await LoadAccounts();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error toggling active state: {ex.Message}");
        }
    }

    private void EditAccount(int accountId)
    {
        Navigation.NavigateTo($"/account/edit/{accountId}");
    }
}
